{"version":3,"sources":["mapsapi.js"],"names":["GoogleMap","evt","mapCenter","map","getCenter","responseInfo","center","responseEvent","CustomEvent","detail","console","log","document","dispatchEvent","preventDefault","placeName","querySelector","value","placeRequest","location","radius","query","service","google","maps","places","PlacesService","textSearch","handlePlaceResults","options","opt","marker","Marker","position","lat","lng","title","name","description","desc","infoWindowContent","infoWindow","InfoWindow","addListener","setContent","open","markers","push","forEach","setMap","results","status","PlacesServiceStatus","OK","clearMarker","resCenter","geometry","viewport","Ua","i","La","mapOptions","zoom","Map","getElementById","rm","length","resName","resLat","resLng","resRate","rating","resAddy","formatted_address","createMarker","setupListeners","addEventListener","handleMapCenterRequest","circusCenter","mapReadyEvt","window","gMap"],"mappings":"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","sourcesContent":["class GoogleMap {\r\n\r\n    API_KEY = 'AIzaSyA3tRPWowcO3i2l6jwjEWdUg1wRaEShj1A'\r\n\r\n    markers = []\r\n\r\n    constructor () {\r\n\r\n        this.setupListeners()\r\n    }\r\n\r\n    setupListeners() {\r\n        document.addEventListener(`get-map-center`, this.handleMapCenterRequest)\r\n        document.addEventListener(`clear-marker`, this.clearMarker)\r\n        document.addEventListener(`create-marker`, this.createMarker)\r\n    }\r\n\r\n    handleMapCenterRequest = (evt) => {\r\n        const mapCenter = this.map.getCenter()\r\n        \r\n        const responseInfo = { center: mapCenter }\r\n        const responseEvent = new CustomEvent(`get-map-center-response`, { detail: responseInfo})\r\n        console.log(responseInfo)\r\n        document.dispatchEvent(responseEvent)\r\n    }\r\n\r\n    // init () {\r\n    //     console.log('googleMap init')\r\n\r\n    //     const form = document.querySelector('form[name=\"business_search\"]')\r\n    //     form.addEventListener('submit', this.handlePlaceSearch)\r\n    // }\r\n\r\n    handlePlaceSearch = (evt) => {\r\n        evt.preventDefault()\r\n        var placeName = document.querySelector('#term').value\r\n\r\n        var placeRequest = {\r\n            location: this.map.getCenter(),\r\n            radius: 50, // this is in meters or miles??\r\n            query: placeName\r\n        }\r\n\r\n        this.service = new google.maps.places.PlacesService(this.map)\r\n        this.service.textSearch(placeRequest, this.handlePlaceResults)\r\n\r\n        console.log('searching places')\r\n    }\r\n\r\n    createMarker = (options) => {\r\n        const opt = options.detail\r\n        var marker = new google.maps.Marker({\r\n            position: {lat: opt.lat, lng: opt.lng },\r\n            map: this.map,\r\n            title: opt.name,\r\n            description: opt.desc\r\n        })\r\n        // console.log(`marker ${opt.latitude}`)\r\n        console.log(`mapApi options: `, options)\r\n\r\n        const infoWindowContent = `<div><h2>${options.title}</h2>${options.description}</div>`\r\n        if (!this.infoWindow) {\r\n            this.infoWindow = new google.maps.InfoWindow()\r\n        }\r\n\r\n        marker.addListener('click', () => {\r\n            this.infoWindow.setContent(infoWindowContent)\r\n            this.infoWindow.open(this.map, marker)\r\n        })\r\n\r\n        this.markers.push(marker)\r\n    }\r\n\r\n    clearMarker = () => {\r\n        this.markers.forEach(marker => {\r\n            marker.setMap(null)\r\n        })\r\n\r\n        console.log(`markers cleared`)\r\n        this.markers = []\r\n    }\r\n\r\n\r\n    handlePlaceResults = (results, status) => {\r\n        if (status == google.maps.places.PlacesServiceStatus.OK){\r\n            this.clearMarker()\r\n            console.log('got results', results)\r\n            var resCenter = {lat: results[0].geometry.viewport.Ua.i , lng: results[0].geometry.viewport.La.i }\r\n\r\n            var mapOptions = {\r\n                center: resCenter,\r\n                zoom:13\r\n            }\r\n            this.map = new google.maps.Map(document.getElementById('map'), mapOptions)\r\n\r\n            for (let rm = 0; rm < results.length; rm++) {\r\n                var resName = results[rm].name\r\n                var resLat = results[rm].geometry.viewport.Ua.i\r\n                var resLng = results[rm].geometry.viewport.La.i\r\n                // var resHours = results[rm].opening_hours.isOpen\r\n                // var resNum = results[rm].\r\n                var resRate = results[rm].rating\r\n                var resAddy = results[rm].formatted_address\r\n\r\n                console.log(resName, resRate) //name of the place, hours, phone number, and rating.\r\n\r\n                this.createMarker({\r\n                    lat: resLat,\r\n                    lng: resLng,\r\n                    title: resName,\r\n                    desc:`<div class=\"column\"><p>Rating ${resRate}</p><p>${resAddy}</p></div>`\r\n                })\r\n\r\n\r\n            }\r\n        } else {\r\n            console.log('error: ')\r\n        }\r\n    }\r\n\r\n    ready() {\r\n        console.log('GoogleMap is ready')\r\n\r\n        const circusCenter = { lat: 33.812328, lng: -84.36175 }\r\n        const mapOptions = {\r\n            center: circusCenter,\r\n            zoom: 18\r\n        }\r\n\r\n        this.map = new google.maps.Map(document.getElementById('map'), mapOptions)\r\n\r\n        // this.createMarker({\r\n        //     lat: circusCenter.lat,\r\n        //     lng: circusCenter.lng,\r\n        //     title: \"The Circus\",\r\n        //     description: `<div><p>A place where cool shit is made.</p></div>`\r\n        // })\r\n\r\n        const mapReadyEvt = new CustomEvent(`map-ready`)\r\n        document.dispatchEvent(mapReadyEvt)\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\nwindow.gMap = new GoogleMap()\r\n"],"file":"mapsapi.js"}